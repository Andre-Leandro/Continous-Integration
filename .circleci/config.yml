version: 2.1

orbs:
  slack: circleci/slack@4.3.2
  sonarcloud: sonarsource/sonarcloud@2.0.0

jobs:
  lint:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: npm install
      - run: npm run lint
      - run: npm run lint:html
  test:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run:
          name: Instalar Mocha y Chai
          command: npm install mocha chai
      - run:
          name: Ejecutar pruebas
          command: npx mocha test/test.js
      - slack/notify:
          channel: general
          event: pass
          template: basic_success
          custom: |
            {
                  "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "TEST EXITOSO :white_check_mark:"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Usuario:*\n$CIRCLE_USERNAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Repositorio:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n$CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    }
                  ]
                }
              ]
            }
      
  sonarcloud:
    docker:
      - image: node:latest
    steps:
      - checkout
      - sonarcloud/scan
     
  deploy:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://api.render.com/deploy/srv-cpdr55n109ks73em4ecg?key=0m-6SGBdA7I")
          if [ $response -eq 200 ]; then
            echo "Deployment successful"
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Deploy Iniciado."}' $SLACK_WEBHOOK_URL
          else
            echo "Deployment failed with HTTP status code $response"
            curl -X POST -H 'Content-type: application/json' --data '{"text":"¡Ha fallado el Deploy!"}' "$SLACK_WEBHOOK_URL"
            exit 1
          fi
      - run:
          name: Esperar a que el deploy se complete
          command: |
            deploy_status="pending"
            while [ "$deploy_status" != "live" ]; do
              response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/srv-cpdr55n109ks73em4ecg/deploys")
              echo "Render API response: $response"
              deploy_status=$(echo $response | jq -r '.[0].deploy.status') 
              echo "Current deploy status: $deploy_status"
              if [ "$deploy_status" == "failed" ]; then
                echo "Deployment failed."
                curl -X POST -H 'Content-type: application/json' --data '{"text":"¡El deploy ha fallado!"}' $SLACK_WEBHOOK_URL
                exit 1
              fi
              sleep 10
            done
            echo "Deployment completed successfully."
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Deploy LUJOSO con éxito!"}' $SLACK_WEBHOOK_URL

  test-deploy:
    docker:
      - image: cypress/base
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: npm install
      - run:
          name: Ejecutar pruebas de Cypress
          command: npx cypress run

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - lint:
          filters:
            branches:
              only: main
      - test:
          requires:
            - lint
          filters:
            branches:
              only: main
      - sonarcloud:
          requires:
            - test
          filters: 
            branches:
              only: main        
      - deploy:
          requires:
            - sonarcloud
          filters:
             branches:
              only: main
      - test-deploy:
            requires:
              - deploy
            filters:
              branches:
                only: main