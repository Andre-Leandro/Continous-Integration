version: 2.1

orbs:
  slack: circleci/slack@4.3.2

jobs:
  lint:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: npm install
      - run: npm run lint
      - run: npm run lint:html
  test:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run:
          name: Instalar Mocha y Chai
          command: npm install mocha chai
      - run:
          name: Ejecutar pruebas
          command: npx mocha test/test.js
      - slack/notify:
          channel: general
          event: pass
          template: basic_success
          custom: |
            {
                  "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "TEST EXITOSO :white_check_mark:"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Usuario:*\n$CIRCLE_USERNAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Repositorio:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n$CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    }
                  ]
                }
              ]
            }

  sonarcloud:
    docker:
      - image: sonarsource/sonar-scanner-cli:4.6
    steps:
      - checkout
      - run:
          name: Install SonarScanner
          command: |
            npm install -g sonarqube-scanner
      - run:
          name: Run SonarCloud analysis
          command: |
            sonar-scanner \
              -Dsonar.projectKey=your_project_key \
              -Dsonar.organization=your_organization_key \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=$SONAR_TOKEN
      - run:
          name: Check Quality Gate
          command: |
            status=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=your_project_key" | jq -r .projectStatus.status)
            if [ "$status" != "OK" ]; then
              echo "Quality gate failed"
              exit 1
            fi
      - slack/notify:
          channel: general
          event: fail
          template: basic_success
 
     

  deploy:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://api.render.com/deploy/srv-cpdr55n109ks73em4ecg?key=0m-6SGBdA7I")
          if [ $response -eq 200 ]; then
            echo "Deployment successful"
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Deploy exitoso."}' $SLACK_WEBHOOK_URL
          else
            echo "Deployment failed with HTTP status code $response"
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Â¡Ha fallado el Deploy!"}' "$SLACK_WEBHOOK_URL"
            exit 1
          fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - lint:
          filters:
            branches:
              only: main
      - test:
          requires:
            - lint
          filters:
            branches:
              only: main

      - sonarcloud:
          requires:
            - test
          filters: 
            branches:
              only: main
        
      - deploy:
            requires:
              - sonarcloud
            filters:
              branches:
                only: main