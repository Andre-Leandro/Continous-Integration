version: 2.1

orbs:
  slack: circleci/slack@4.3.2
  sonarcloud: sonarsource/sonarcloud@2.0.0

jobs:
  notify-start:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Obtener el mensaje del commit
          command: |
            export COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "export COMMIT_MSG='$COMMIT_MSG'" >> $BASH_ENV
      - slack/notify:
          channel: general
          event: always
          template: custom
          custom: |
            {
              "blocks": [
                {
                    "type": "divider"
                  },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Se ha iniciado un nuevo trabajo en CircleCI."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Usuario:*\n$CIRCLE_USERNAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Repositorio:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n$COMMIT_MSG"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ]
            }

  lint:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: npm install
      - run: npm run lint
      - run: npm run lint:html
      - slack/notify:
          channel: general
          event: fail
          template: basic_failed
          custom: '{"text":"¡El *linter* ha fallado! :x:"}'
      - slack/notify:
          channel: general
          event: pass
          template: basic_success
          custom: '{"text":"El *linter* ha pasado. :white_check_mark:"}'

  test:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run:
          name: Instalar Mocha y Chai
          command: npm install
      - run: npm run test
      - slack/notify:
          channel: general
          event: fail
          template: basic_failed
          custom: '{"text":"¡Las *pruebas* han fallado! :x:"}'
      - slack/notify:
          channel: general
          event: pass
          template: basic_success
          custom: '{"text":"Las *pruebas* han pasado. :white_check_mark:"}'

      
  sonarcloud:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: npm install
      - run: npm run test
      - sonarcloud/scan
      - run:
          name: Verificar calidad de SonarCloud
          command: |
            STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY" | jq -r '.projectStatus.status')
            if [ "$STATUS" != "OK" ]; then
              echo "Quality gate failed: $STATUS"
              exit 1  
            else 
              echo "Quality gate passed: $STATUS"
            fi
      - slack/notify:
          channel: general
          event: fail
          template: basic_failed
          custom: '{"text":"¡No se ha pasado el análisis de SonarCloud! :x:"}'
      - slack/notify:
          channel: general
          event: pass
          template: basic_success
          custom: '{"text":"Se ha pasado el análisis de SonarCloud. :white_check_mark:"}'
     
  deploy:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://api.render.com/deploy/srv-cpdr55n109ks73em4ecg?key=0m-6SGBdA7I")
          if [ $response -eq 200 ]; then
            echo "Deployment successful"
            SLACK_MESSAGE="El deploy ha iniciado correctamente. :gear: "
          else
            echo "Deployment failed with HTTP status code $response"
            SLACK_MESSAGE="¡La petición de deploy ha fallado! :x:"
            exit 1
          fi
          echo "export SLACK_MESSAGE='$SLACK_MESSAGE'" >> $BASH_ENV
      - slack/notify:
          channel: general
          event: always
          template: custom
          custom: '{"text":"$SLACK_MESSAGE"}'
      - run:
          name: Esperar a que el deploy se complete
          command: |
            deploy_status="pending"
            while [ "$deploy_status" != "live" ]; do
              response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/srv-cpdr55n109ks73em4ecg/deploys")
              echo "Render API response: $response"
              deploy_status=$(echo $response | jq -r '.[0].deploy.status') 
              echo "Current deploy status: $deploy_status"
              if [ "$deploy_status" == "failed" ]; then
                echo "Deployment failed."
                exit 1
              fi
              sleep 10
            done
            echo "Deployment completed successfully."
      - slack/notify:
          channel: general
          event: fail
          template: basic_failed
          custom: '{"text":"¡El *deploy* ha fallado! :x:"}'
      - slack/notify:
          channel: general
          event: pass
          template: basic_success
          custom: '{"text":"El *deploy* fue completado con éxito. :white_check_mark:"}'

  test-deploy:
    docker:
      - image: cypress/base
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: npm install
      - run:
          name: Ejecutar pruebas de Cypress
          command: npx cypress run
      - slack/notify:
          channel: general
          event: fail
          template: basic_failed
          custom: '{"text":"¡Las pruebas sobre el deploy han fallado! :x:"}'
      - slack/notify:
          channel: general
          event: pass
          template: basic_success
          custom: '{"text":"Las pruebas sobre el deploy han pasado. :white_check_mark:"}'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - notify-start
      - lint:
          requires:
            - notify-start
      - test:
          requires:
            - lint
          filters:
            branches:
              only: main
      - sonarcloud:
          context: SonarCloud
          requires:
            - test
          filters: 
            branches:
              only: main        
      - deploy:
          requires:
            - sonarcloud
          filters:
             branches:
              only: main
      - test-deploy:
            requires:
              - deploy
            filters:
              branches:
                only: main